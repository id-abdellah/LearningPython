# --------------------------------------
# ---- Set Methods p2----
# --------------------------------------
#
# difference(setB) or setA - setB
# difference_update(setB)
# 
# intersection(setB) or setA & setB
# intersection_update(setB)
#
# symmetric_difference(setB) or setA ^ setB
# symmetric_difference_update(setB)
# --------------------------------------



# --------------------------------------
# difference(set), setA - setB

# sets من سميتها باينة انها كتطلع ليك الاختلاف مابين جوج
# التانية set لولة ومكاينينش فال set ولكن طريقة العمل ديالها انها كتطلع ليك العناصر لي ال

# لي عطيتيها sets جديدة فيها الاختلاف مابين الجوج set يعني كترجع ليك

# - بال difference تاهادي تقد دير pipeline | لي تقد ديرو بال union بحال قضية ال

a = {1, 2, 3, 4}
b = {1, 2, "A", "B"}

print(a)
print(a.difference(b), a - b) # the same thing {3, 4}
print(a)

# --------------------------------------

print("#" * 40)



# --------------------------------------
# difference_update(set)

# كيديرو نفس الخدمة differences هادي بحالها بحال ال
# جديدة set كترجع ليك الاختلافات ف difference غار ال

# يعني فالاصلية original set كتشد الاختلافات وكديرهم بلاصة ال difference_update اما ال

c = {1, 2, "a", "b"}
d = {1, 2, 3, 4}

print(c)
c.difference_update(d)
print(c) # {'a', 'b'}

# --------------------------------------

print("#" * 40)



# --------------------------------------
# intersection(set), setA & setB

# بجوج set هادي كتجيب ليك الحاجات المشتركة فال
# اللولة ومكاينينش فالتانية set لي كتجيب ليك الحوايج لي كاينين difference على عكس ال
# بجوج sets هادي كتجيب ليك الحوايج المشتركة بيناتهم يعني لي كاينين فال

e = {1, 2, 3, 4, "x"}
f = {"Obito", 2, "x"}

print(e.intersection(f), e & f) # {2, 'x'}

# هوما لي مشتاركين فيهم بجوج x يعني فالمثال ال فوقاني ال 2 وال

# --------------------------------------


print("#" * 40)



# --------------------------------------
# intersection_update(set)

# الاصلية بالجديدة لي فيها العناصر المشتركة set نفس القضية كتبدل ال

ee = {1, 2, 3, 4, "x"}
ff = {"Obito", 2, "x"}

print(ee)
ee.intersection_update(ff)
print(ee) # {2, 'x'}

# --------------------------------------


print("#" * 40)


# --------------------------------------
# symmetric_difference(set), setA ^ setB

# بجوج يعني ممعاودينش sets هادي كترجع ليك العناصر لي مكاينينش في ال

i = {1, 2, 3, 4, "a", "b"}
j = {1, 2, 5, 10, "Obito", "a", "x"}

print(i.symmetric_difference(j), i ^ j) # {3, 4, 5, 'x', 10, 'b', 'Obito'}

# --------------------------------------

print("#" * 40)


# --------------------------------------
# symmetric_difference_update(set)

# الجديدة لي كترجع كتعوضها بلاصة الاصلية set نفس الحاجة ال

ii = {1, 2, 3, 4, "a", "b"}
jj = {1, 2, 5, 10, "Obito", "a", "x"}

print(ii)
ii.symmetric_difference_update(jj)
print(ii) # {3, 4, 5, 10, 'b', 'Obito', 'x'}
# --------------------------------------






# دبا كخلاصة

# الثانية set اللولة و مكاينينش فال set كترجع ليك العناصر لي فال difference ال
# اللولة والتانية set بجوج يعني كاينين فال sets كيرجع ليك العناصر لي كيتشاركو فيهم ال intersection ال
# بجوج sets كيرجع ليك العناصر لي مكيتشاركوش فيهم ال symmetric_difference اما ال
# ومكاينينش فولخرا set يعني العناصر لي كاينين فشي

# جديدة set كيرجعو ليك النتيجة ك update العادية لي مفيهمش method بالنسبة لل
# الاصلية و كيعوضوها بالنتيجة لي خرجات منهم set كيشدو ال update اما لي كيساليو ب